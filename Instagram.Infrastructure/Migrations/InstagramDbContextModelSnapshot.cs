// <auto-generated />
using System;
using Instagram.Infrastructure.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Instagram.Infrastructure.Migrations
{
    [DbContext(typeof(InstagramDbContext))]
    partial class InstagramDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ChatUser", b =>
                {
                    b.Property<Guid>("ChatsChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParticipantsUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ChatsChatId", "ParticipantsUserId");

                    b.HasIndex("ParticipantsUserId");

                    b.ToTable("ChatParticipants", (string)null);
                });

            modelBuilder.Entity("Instagram.Domain.Chats.Chat", b =>
                {
                    b.Property<Guid>("ChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChatName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("ChatId");

                    b.ToTable("Chat");
                });

            modelBuilder.Entity("Instagram.Domain.Chats.Entities.Message", b =>
                {
                    b.Property<Guid>("MessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("OriginalChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MessageId");

                    b.HasIndex("OriginalChatId");

                    b.HasIndex("SenderId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("Instagram.Domain.Followers.Follower", b =>
                {
                    b.Property<Guid>("FollowId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FollowedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserFollowingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FollowId");

                    b.HasIndex("FollowedUserId");

                    b.HasIndex("UserFollowingId");

                    b.ToTable("Followers");
                });

            modelBuilder.Entity("Instagram.Domain.Posts.Entities.Comment", b =>
                {
                    b.Property<Guid>("CommmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CommentAuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommentDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("OriginalPostId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CommmentId");

                    b.HasIndex("CommentAuthorId");

                    b.HasIndex("OriginalPostId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Instagram.Domain.Posts.Entities.PostReaction", b =>
                {
                    b.Property<Guid>("PostReactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReactedPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReactionAuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PostReactionId");

                    b.HasIndex("ReactedPostId");

                    b.HasIndex("ReactionAuthorId");

                    b.ToTable("PostReactions");
                });

            modelBuilder.Entity("Instagram.Domain.Posts.Post", b =>
                {
                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PostAuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PostDescription")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("TotalComments")
                        .HasColumnType("int");

                    b.Property<int>("TotalReactions")
                        .HasColumnType("int");

                    b.HasKey("PostId");

                    b.HasIndex("PostAuthorId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Instagram.Domain.Users.Entities.FriendShip", b =>
                {
                    b.Property<Guid>("FriendShipId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FriendId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FriendShipId");

                    b.HasIndex("FriendId");

                    b.ToTable("FriendShip");
                });

            modelBuilder.Entity("Instagram.Domain.Users.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ChatUser", b =>
                {
                    b.HasOne("Instagram.Domain.Chats.Chat", null)
                        .WithMany()
                        .HasForeignKey("ChatsChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Instagram.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("ParticipantsUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Instagram.Domain.Chats.Entities.Message", b =>
                {
                    b.HasOne("Instagram.Domain.Chats.Chat", "OriginalChat")
                        .WithMany("ChatMessages")
                        .HasForeignKey("OriginalChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Instagram.Domain.Users.User", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OriginalChat");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Instagram.Domain.Followers.Follower", b =>
                {
                    b.HasOne("Instagram.Domain.Users.User", "FollowedUser")
                        .WithMany("Followers")
                        .HasForeignKey("FollowedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Instagram.Domain.Users.User", "UserFollowing")
                        .WithMany("Followings")
                        .HasForeignKey("UserFollowingId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("FollowedUser");

                    b.Navigation("UserFollowing");
                });

            modelBuilder.Entity("Instagram.Domain.Posts.Entities.Comment", b =>
                {
                    b.HasOne("Instagram.Domain.Users.User", "CommentAuthor")
                        .WithMany("UserComments")
                        .HasForeignKey("CommentAuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Instagram.Domain.Posts.Post", "OriginalPost")
                        .WithMany("PostComments")
                        .HasForeignKey("OriginalPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommentAuthor");

                    b.Navigation("OriginalPost");
                });

            modelBuilder.Entity("Instagram.Domain.Posts.Entities.PostReaction", b =>
                {
                    b.HasOne("Instagram.Domain.Posts.Post", "ReactedPost")
                        .WithMany("PostReactions")
                        .HasForeignKey("ReactedPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Instagram.Domain.Users.User", "ReactionAuthor")
                        .WithMany("PostReactions")
                        .HasForeignKey("ReactionAuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReactedPost");

                    b.Navigation("ReactionAuthor");
                });

            modelBuilder.Entity("Instagram.Domain.Posts.Post", b =>
                {
                    b.HasOne("Instagram.Domain.Users.User", "PostAuthor")
                        .WithMany("Posts")
                        .HasForeignKey("PostAuthorId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("PostAuthor");
                });

            modelBuilder.Entity("Instagram.Domain.Users.Entities.FriendShip", b =>
                {
                    b.HasOne("Instagram.Domain.Users.User", "Friend")
                        .WithMany("Friends")
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Friend");
                });

            modelBuilder.Entity("Instagram.Domain.Users.User", b =>
                {
                    b.OwnsOne("Instagram.Domain.Users.ValueObjects.UserProfile", "Profile", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Age")
                                .HasColumnType("int");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(80)
                                .HasColumnType("nvarchar(80)");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Profile")
                        .IsRequired();
                });

            modelBuilder.Entity("Instagram.Domain.Chats.Chat", b =>
                {
                    b.Navigation("ChatMessages");
                });

            modelBuilder.Entity("Instagram.Domain.Posts.Post", b =>
                {
                    b.Navigation("PostComments");

                    b.Navigation("PostReactions");
                });

            modelBuilder.Entity("Instagram.Domain.Users.User", b =>
                {
                    b.Navigation("Followers");

                    b.Navigation("Followings");

                    b.Navigation("Friends");

                    b.Navigation("Messages");

                    b.Navigation("PostReactions");

                    b.Navigation("Posts");

                    b.Navigation("UserComments");
                });
#pragma warning restore 612, 618
        }
    }
}
